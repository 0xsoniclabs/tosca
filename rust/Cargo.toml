[workspace]
members = ["driver", "benchmarks", "bencher", "llvm-profile-wrappers", "fuzz"]

[package]
name = "evmrs"
version = "0.1.0"
edition = "2024"

[profile.release]
lto = true
codegen-units = 1

[profile.profiling]
inherits = "release"
debug = true

[features]
default = []
# feature mock enables code generation for test mocking. This allows generating mocks for other build configuration but "test". 
mock = ["dep:mockall"]
fuzzing = ["dep:arbitrary"]
# partial features (enabled by other features to simplify conditional compilation attributes. Not intended to be used on their own)
needs-cache = ["dep:lru"]
# optimizations:
performance = [
    "mimalloc",
    "unsafe-stack",
    "unsafe-hints",
    "hash-cache",
    "code-analysis-cache",
    "alloc-reuse",
    "fn-ptr-conversion-dispatch",
]
mimalloc = ["dep:mimalloc"]
unsafe-stack = []
unsafe-hints = []
hash-cache = ["needs-cache"]
code-analysis-cache = ["dep:nohash-hasher", "needs-cache"]
alloc-reuse = []
tail-call = []
# function/ opcode dispatch:
# feature precedence: jumptable-dispatch (default) < fn-ptr-conversion-dispatch
fn-ptr-conversion-dispatch = []

[dependencies]
evmc-vm = { path = "evmc-vm" }
llvm-profile-wrappers = { path = "llvm-profile-wrappers" }
bnum = "0.13.0"
ethnum = "1.5.0"
sha3 = "0.10.8"
zerocopy = { version = "0.8.8", features = ["derive"] }
mockall = { version = "0.13.0", optional = true }
arbitrary = { version = "1.4.1", features = ["derive"], optional = true }
mimalloc = { version = "0.1.43", optional = true }
lru = { version = "0.14.0", optional = true }
nohash-hasher = { version = "0.2.0", optional = true }

[dev-dependencies]
# workaround for enabling mock feature also in integration tests
evmrs = { path = ".", features = ["mock"] }
driver = { path = "driver", features = ["mock"] }

[lib]
crate-type = ["cdylib", "rlib"]

[lints.rust]
macro_use_extern_crate = "warn"
unused_crate_dependencies = "warn"
unused_unsafe = "warn"

[lints.clippy]
cloned_instead_of_copied = "warn"
collection_is_never_read = "warn"
copy_iterator = "warn"
default_trait_access = "warn"
filter_map_next = "warn"
format_push_string = "warn"
implicit_clone = "warn"
inconsistent_struct_constructor = "warn"
inefficient_to_string = "warn"
items_after_statements = "warn"
large_types_passed_by_value = "warn"
macro_use_imports = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
manual_string_new = "warn"
match_same_arms = "warn"
multiple_inherent_impl = "warn"
multiple_unsafe_ops_per_block = "warn"
needless_collect = "warn"
needless_for_each = "warn"
needless_pass_by_value = "warn"
redundant_closure_for_method_calls = "warn"
ref_patterns = "warn"
semicolon_if_nothing_returned = "warn"
single_match_else = "warn"
trivially_copy_pass_by_ref = "warn"
undocumented_unsafe_blocks = "warn"
uninlined_format_args = "warn"
unnested_or_patterns = "warn"
unused_self = "warn"
