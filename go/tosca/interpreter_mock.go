// Code generated by MockGen. DO NOT EDIT.
// Source: interpreter.go
//
// Generated by this command:
//
//	mockgen -source interpreter.go -destination interpreter_mock.go -package tosca
//

// Package tosca is a generated GoMock package.
package tosca

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterpreter is a mock of Interpreter interface.
type MockInterpreter struct {
	ctrl     *gomock.Controller
	recorder *MockInterpreterMockRecorder
	isgomock struct{}
}

// MockInterpreterMockRecorder is the mock recorder for MockInterpreter.
type MockInterpreterMockRecorder struct {
	mock *MockInterpreter
}

// NewMockInterpreter creates a new mock instance.
func NewMockInterpreter(ctrl *gomock.Controller) *MockInterpreter {
	mock := &MockInterpreter{ctrl: ctrl}
	mock.recorder = &MockInterpreterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterpreter) EXPECT() *MockInterpreterMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockInterpreter) Run(arg0 Parameters) (Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockInterpreterMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInterpreter)(nil).Run), arg0)
}

// MockRunContext is a mock of RunContext interface.
type MockRunContext struct {
	ctrl     *gomock.Controller
	recorder *MockRunContextMockRecorder
	isgomock struct{}
}

// MockRunContextMockRecorder is the mock recorder for MockRunContext.
type MockRunContextMockRecorder struct {
	mock *MockRunContext
}

// NewMockRunContext creates a new mock instance.
func NewMockRunContext(ctrl *gomock.Controller) *MockRunContext {
	mock := &MockRunContext{ctrl: ctrl}
	mock.recorder = &MockRunContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunContext) EXPECT() *MockRunContextMockRecorder {
	return m.recorder
}

// AccessAccount mocks base method.
func (m *MockRunContext) AccessAccount(arg0 Address) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessAccount", arg0)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessAccount indicates an expected call of AccessAccount.
func (mr *MockRunContextMockRecorder) AccessAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessAccount", reflect.TypeOf((*MockRunContext)(nil).AccessAccount), arg0)
}

// AccessStorage mocks base method.
func (m *MockRunContext) AccessStorage(arg0 Address, arg1 Key) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessStorage", arg0, arg1)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessStorage indicates an expected call of AccessStorage.
func (mr *MockRunContextMockRecorder) AccessStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessStorage", reflect.TypeOf((*MockRunContext)(nil).AccessStorage), arg0, arg1)
}

// Call mocks base method.
func (m *MockRunContext) Call(kind CallKind, parameter CallParameters) (CallResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", kind, parameter)
	ret0, _ := ret[0].(CallResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockRunContextMockRecorder) Call(kind, parameter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockRunContext)(nil).Call), kind, parameter)
}

// EmitLog mocks base method.
func (m *MockRunContext) EmitLog(arg0 Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitLog", arg0)
}

// EmitLog indicates an expected call of EmitLog.
func (mr *MockRunContextMockRecorder) EmitLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitLog", reflect.TypeOf((*MockRunContext)(nil).EmitLog), arg0)
}

// GetBalance mocks base method.
func (m *MockRunContext) GetBalance(arg0 Address) Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(Value)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockRunContextMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockRunContext)(nil).GetBalance), arg0)
}

// GetBlockHash mocks base method.
func (m *MockRunContext) GetBlockHash(number int64) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", number)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockRunContextMockRecorder) GetBlockHash(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockRunContext)(nil).GetBlockHash), number)
}

// GetCode mocks base method.
func (m *MockRunContext) GetCode(arg0 Address) Code {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].(Code)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockRunContextMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockRunContext)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockRunContext) GetCodeHash(arg0 Address) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockRunContextMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockRunContext)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockRunContext) GetCodeSize(arg0 Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockRunContextMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockRunContext)(nil).GetCodeSize), arg0)
}

// GetNonce mocks base method.
func (m *MockRunContext) GetNonce(arg0 Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockRunContextMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockRunContext)(nil).GetNonce), arg0)
}

// GetStorage mocks base method.
func (m *MockRunContext) GetStorage(arg0 Address, arg1 Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", arg0, arg1)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockRunContextMockRecorder) GetStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockRunContext)(nil).GetStorage), arg0, arg1)
}

// GetTransientStorage mocks base method.
func (m *MockRunContext) GetTransientStorage(arg0 Address, arg1 Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientStorage", arg0, arg1)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetTransientStorage indicates an expected call of GetTransientStorage.
func (mr *MockRunContextMockRecorder) GetTransientStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientStorage", reflect.TypeOf((*MockRunContext)(nil).GetTransientStorage), arg0, arg1)
}

// SelfDestruct mocks base method.
func (m *MockRunContext) SelfDestruct(addr, beneficiary Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct", addr, beneficiary)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockRunContextMockRecorder) SelfDestruct(addr, beneficiary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockRunContext)(nil).SelfDestruct), addr, beneficiary)
}

// SetStorage mocks base method.
func (m *MockRunContext) SetStorage(arg0 Address, arg1 Key, arg2 Word) StorageStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(StorageStatus)
	return ret0
}

// SetStorage indicates an expected call of SetStorage.
func (mr *MockRunContextMockRecorder) SetStorage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorage", reflect.TypeOf((*MockRunContext)(nil).SetStorage), arg0, arg1, arg2)
}

// SetTransientStorage mocks base method.
func (m *MockRunContext) SetTransientStorage(arg0 Address, arg1 Key, arg2 Word) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientStorage", arg0, arg1, arg2)
}

// SetTransientStorage indicates an expected call of SetTransientStorage.
func (mr *MockRunContextMockRecorder) SetTransientStorage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientStorage", reflect.TypeOf((*MockRunContext)(nil).SetTransientStorage), arg0, arg1, arg2)
}

// MockTransactionContext is a mock of TransactionContext interface.
type MockTransactionContext struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionContextMockRecorder
	isgomock struct{}
}

// MockTransactionContextMockRecorder is the mock recorder for MockTransactionContext.
type MockTransactionContextMockRecorder struct {
	mock *MockTransactionContext
}

// NewMockTransactionContext creates a new mock instance.
func NewMockTransactionContext(ctrl *gomock.Controller) *MockTransactionContext {
	mock := &MockTransactionContext{ctrl: ctrl}
	mock.recorder = &MockTransactionContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionContext) EXPECT() *MockTransactionContextMockRecorder {
	return m.recorder
}

// AccessAccount mocks base method.
func (m *MockTransactionContext) AccessAccount(arg0 Address) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessAccount", arg0)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessAccount indicates an expected call of AccessAccount.
func (mr *MockTransactionContextMockRecorder) AccessAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessAccount", reflect.TypeOf((*MockTransactionContext)(nil).AccessAccount), arg0)
}

// AccessStorage mocks base method.
func (m *MockTransactionContext) AccessStorage(arg0 Address, arg1 Key) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessStorage", arg0, arg1)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessStorage indicates an expected call of AccessStorage.
func (mr *MockTransactionContextMockRecorder) AccessStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessStorage", reflect.TypeOf((*MockTransactionContext)(nil).AccessStorage), arg0, arg1)
}

// AccountExists mocks base method.
func (m *MockTransactionContext) AccountExists(arg0 Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AccountExists indicates an expected call of AccountExists.
func (mr *MockTransactionContextMockRecorder) AccountExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountExists", reflect.TypeOf((*MockTransactionContext)(nil).AccountExists), arg0)
}

// CreateSnapshot mocks base method.
func (m *MockTransactionContext) CreateSnapshot() Snapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot")
	ret0, _ := ret[0].(Snapshot)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockTransactionContextMockRecorder) CreateSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockTransactionContext)(nil).CreateSnapshot))
}

// EmitLog mocks base method.
func (m *MockTransactionContext) EmitLog(arg0 Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitLog", arg0)
}

// EmitLog indicates an expected call of EmitLog.
func (mr *MockTransactionContextMockRecorder) EmitLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitLog", reflect.TypeOf((*MockTransactionContext)(nil).EmitLog), arg0)
}

// GetBalance mocks base method.
func (m *MockTransactionContext) GetBalance(arg0 Address) Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(Value)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockTransactionContextMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockTransactionContext)(nil).GetBalance), arg0)
}

// GetBlockHash mocks base method.
func (m *MockTransactionContext) GetBlockHash(number int64) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", number)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockTransactionContextMockRecorder) GetBlockHash(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockTransactionContext)(nil).GetBlockHash), number)
}

// GetCode mocks base method.
func (m *MockTransactionContext) GetCode(arg0 Address) Code {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].(Code)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockTransactionContextMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockTransactionContext)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockTransactionContext) GetCodeHash(arg0 Address) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockTransactionContextMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockTransactionContext)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockTransactionContext) GetCodeSize(arg0 Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockTransactionContextMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockTransactionContext)(nil).GetCodeSize), arg0)
}

// GetCommittedStorage mocks base method.
func (m *MockTransactionContext) GetCommittedStorage(addr Address, key Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedStorage", addr, key)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetCommittedStorage indicates an expected call of GetCommittedStorage.
func (mr *MockTransactionContextMockRecorder) GetCommittedStorage(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedStorage", reflect.TypeOf((*MockTransactionContext)(nil).GetCommittedStorage), addr, key)
}

// GetLogs mocks base method.
func (m *MockTransactionContext) GetLogs() []Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockTransactionContextMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockTransactionContext)(nil).GetLogs))
}

// GetNonce mocks base method.
func (m *MockTransactionContext) GetNonce(arg0 Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockTransactionContextMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockTransactionContext)(nil).GetNonce), arg0)
}

// GetStorage mocks base method.
func (m *MockTransactionContext) GetStorage(arg0 Address, arg1 Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", arg0, arg1)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockTransactionContextMockRecorder) GetStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockTransactionContext)(nil).GetStorage), arg0, arg1)
}

// GetTransientStorage mocks base method.
func (m *MockTransactionContext) GetTransientStorage(arg0 Address, arg1 Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientStorage", arg0, arg1)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetTransientStorage indicates an expected call of GetTransientStorage.
func (mr *MockTransactionContextMockRecorder) GetTransientStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientStorage", reflect.TypeOf((*MockTransactionContext)(nil).GetTransientStorage), arg0, arg1)
}

// HasSelfDestructed mocks base method.
func (m *MockTransactionContext) HasSelfDestructed(addr Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSelfDestructed", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSelfDestructed indicates an expected call of HasSelfDestructed.
func (mr *MockTransactionContextMockRecorder) HasSelfDestructed(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSelfDestructed", reflect.TypeOf((*MockTransactionContext)(nil).HasSelfDestructed), addr)
}

// IsAddressInAccessList mocks base method.
func (m *MockTransactionContext) IsAddressInAccessList(addr Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressInAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAddressInAccessList indicates an expected call of IsAddressInAccessList.
func (mr *MockTransactionContextMockRecorder) IsAddressInAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressInAccessList", reflect.TypeOf((*MockTransactionContext)(nil).IsAddressInAccessList), addr)
}

// IsSlotInAccessList mocks base method.
func (m *MockTransactionContext) IsSlotInAccessList(addr Address, key Key) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlotInAccessList", addr, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsSlotInAccessList indicates an expected call of IsSlotInAccessList.
func (mr *MockTransactionContextMockRecorder) IsSlotInAccessList(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlotInAccessList", reflect.TypeOf((*MockTransactionContext)(nil).IsSlotInAccessList), addr, key)
}

// RestoreSnapshot mocks base method.
func (m *MockTransactionContext) RestoreSnapshot(arg0 Snapshot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RestoreSnapshot", arg0)
}

// RestoreSnapshot indicates an expected call of RestoreSnapshot.
func (mr *MockTransactionContextMockRecorder) RestoreSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSnapshot", reflect.TypeOf((*MockTransactionContext)(nil).RestoreSnapshot), arg0)
}

// SelfDestruct mocks base method.
func (m *MockTransactionContext) SelfDestruct(addr, beneficiary Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct", addr, beneficiary)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockTransactionContextMockRecorder) SelfDestruct(addr, beneficiary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockTransactionContext)(nil).SelfDestruct), addr, beneficiary)
}

// SetBalance mocks base method.
func (m *MockTransactionContext) SetBalance(arg0 Address, arg1 Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", arg0, arg1)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockTransactionContextMockRecorder) SetBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockTransactionContext)(nil).SetBalance), arg0, arg1)
}

// SetCode mocks base method.
func (m *MockTransactionContext) SetCode(arg0 Address, arg1 Code) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockTransactionContextMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockTransactionContext)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockTransactionContext) SetNonce(arg0 Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockTransactionContextMockRecorder) SetNonce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockTransactionContext)(nil).SetNonce), arg0, arg1)
}

// SetStorage mocks base method.
func (m *MockTransactionContext) SetStorage(arg0 Address, arg1 Key, arg2 Word) StorageStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(StorageStatus)
	return ret0
}

// SetStorage indicates an expected call of SetStorage.
func (mr *MockTransactionContextMockRecorder) SetStorage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorage", reflect.TypeOf((*MockTransactionContext)(nil).SetStorage), arg0, arg1, arg2)
}

// SetTransientStorage mocks base method.
func (m *MockTransactionContext) SetTransientStorage(arg0 Address, arg1 Key, arg2 Word) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientStorage", arg0, arg1, arg2)
}

// SetTransientStorage indicates an expected call of SetTransientStorage.
func (mr *MockTransactionContextMockRecorder) SetTransientStorage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientStorage", reflect.TypeOf((*MockTransactionContext)(nil).SetTransientStorage), arg0, arg1, arg2)
}

// MockInterpreterContext is a mock of InterpreterContext interface.
type MockInterpreterContext struct {
	ctrl     *gomock.Controller
	recorder *MockInterpreterContextMockRecorder
	isgomock struct{}
}

// MockInterpreterContextMockRecorder is the mock recorder for MockInterpreterContext.
type MockInterpreterContextMockRecorder struct {
	mock *MockInterpreterContext
}

// NewMockInterpreterContext creates a new mock instance.
func NewMockInterpreterContext(ctrl *gomock.Controller) *MockInterpreterContext {
	mock := &MockInterpreterContext{ctrl: ctrl}
	mock.recorder = &MockInterpreterContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterpreterContext) EXPECT() *MockInterpreterContextMockRecorder {
	return m.recorder
}

// AccessAccount mocks base method.
func (m *MockInterpreterContext) AccessAccount(arg0 Address) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessAccount", arg0)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessAccount indicates an expected call of AccessAccount.
func (mr *MockInterpreterContextMockRecorder) AccessAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessAccount", reflect.TypeOf((*MockInterpreterContext)(nil).AccessAccount), arg0)
}

// AccessStorage mocks base method.
func (m *MockInterpreterContext) AccessStorage(arg0 Address, arg1 Key) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessStorage", arg0, arg1)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessStorage indicates an expected call of AccessStorage.
func (mr *MockInterpreterContextMockRecorder) AccessStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessStorage", reflect.TypeOf((*MockInterpreterContext)(nil).AccessStorage), arg0, arg1)
}

// EmitLog mocks base method.
func (m *MockInterpreterContext) EmitLog(arg0 Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitLog", arg0)
}

// EmitLog indicates an expected call of EmitLog.
func (mr *MockInterpreterContextMockRecorder) EmitLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitLog", reflect.TypeOf((*MockInterpreterContext)(nil).EmitLog), arg0)
}

// GetBalance mocks base method.
func (m *MockInterpreterContext) GetBalance(arg0 Address) Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(Value)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockInterpreterContextMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockInterpreterContext)(nil).GetBalance), arg0)
}

// GetBlockHash mocks base method.
func (m *MockInterpreterContext) GetBlockHash(number int64) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", number)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockInterpreterContextMockRecorder) GetBlockHash(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockInterpreterContext)(nil).GetBlockHash), number)
}

// GetCode mocks base method.
func (m *MockInterpreterContext) GetCode(arg0 Address) Code {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].(Code)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockInterpreterContextMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockInterpreterContext)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockInterpreterContext) GetCodeHash(arg0 Address) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockInterpreterContextMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockInterpreterContext)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockInterpreterContext) GetCodeSize(arg0 Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockInterpreterContextMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockInterpreterContext)(nil).GetCodeSize), arg0)
}

// GetNonce mocks base method.
func (m *MockInterpreterContext) GetNonce(arg0 Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockInterpreterContextMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockInterpreterContext)(nil).GetNonce), arg0)
}

// GetStorage mocks base method.
func (m *MockInterpreterContext) GetStorage(arg0 Address, arg1 Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", arg0, arg1)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockInterpreterContextMockRecorder) GetStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockInterpreterContext)(nil).GetStorage), arg0, arg1)
}

// GetTransientStorage mocks base method.
func (m *MockInterpreterContext) GetTransientStorage(arg0 Address, arg1 Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientStorage", arg0, arg1)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetTransientStorage indicates an expected call of GetTransientStorage.
func (mr *MockInterpreterContextMockRecorder) GetTransientStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientStorage", reflect.TypeOf((*MockInterpreterContext)(nil).GetTransientStorage), arg0, arg1)
}

// SelfDestruct mocks base method.
func (m *MockInterpreterContext) SelfDestruct(addr, beneficiary Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct", addr, beneficiary)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockInterpreterContextMockRecorder) SelfDestruct(addr, beneficiary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockInterpreterContext)(nil).SelfDestruct), addr, beneficiary)
}

// SetStorage mocks base method.
func (m *MockInterpreterContext) SetStorage(arg0 Address, arg1 Key, arg2 Word) StorageStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(StorageStatus)
	return ret0
}

// SetStorage indicates an expected call of SetStorage.
func (mr *MockInterpreterContextMockRecorder) SetStorage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorage", reflect.TypeOf((*MockInterpreterContext)(nil).SetStorage), arg0, arg1, arg2)
}

// SetTransientStorage mocks base method.
func (m *MockInterpreterContext) SetTransientStorage(arg0 Address, arg1 Key, arg2 Word) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientStorage", arg0, arg1, arg2)
}

// SetTransientStorage indicates an expected call of SetTransientStorage.
func (mr *MockInterpreterContextMockRecorder) SetTransientStorage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientStorage", reflect.TypeOf((*MockInterpreterContext)(nil).SetTransientStorage), arg0, arg1, arg2)
}

// MockProcessorContext is a mock of ProcessorContext interface.
type MockProcessorContext struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorContextMockRecorder
	isgomock struct{}
}

// MockProcessorContextMockRecorder is the mock recorder for MockProcessorContext.
type MockProcessorContextMockRecorder struct {
	mock *MockProcessorContext
}

// NewMockProcessorContext creates a new mock instance.
func NewMockProcessorContext(ctrl *gomock.Controller) *MockProcessorContext {
	mock := &MockProcessorContext{ctrl: ctrl}
	mock.recorder = &MockProcessorContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessorContext) EXPECT() *MockProcessorContextMockRecorder {
	return m.recorder
}

// AccessAccount mocks base method.
func (m *MockProcessorContext) AccessAccount(arg0 Address) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessAccount", arg0)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessAccount indicates an expected call of AccessAccount.
func (mr *MockProcessorContextMockRecorder) AccessAccount(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessAccount", reflect.TypeOf((*MockProcessorContext)(nil).AccessAccount), arg0)
}

// AccessStorage mocks base method.
func (m *MockProcessorContext) AccessStorage(arg0 Address, arg1 Key) AccessStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessStorage", arg0, arg1)
	ret0, _ := ret[0].(AccessStatus)
	return ret0
}

// AccessStorage indicates an expected call of AccessStorage.
func (mr *MockProcessorContextMockRecorder) AccessStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessStorage", reflect.TypeOf((*MockProcessorContext)(nil).AccessStorage), arg0, arg1)
}

// AccountExists mocks base method.
func (m *MockProcessorContext) AccountExists(arg0 Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AccountExists indicates an expected call of AccountExists.
func (mr *MockProcessorContextMockRecorder) AccountExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountExists", reflect.TypeOf((*MockProcessorContext)(nil).AccountExists), arg0)
}

// CreateSnapshot mocks base method.
func (m *MockProcessorContext) CreateSnapshot() Snapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot")
	ret0, _ := ret[0].(Snapshot)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockProcessorContextMockRecorder) CreateSnapshot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockProcessorContext)(nil).CreateSnapshot))
}

// EmitLog mocks base method.
func (m *MockProcessorContext) EmitLog(arg0 Log) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitLog", arg0)
}

// EmitLog indicates an expected call of EmitLog.
func (mr *MockProcessorContextMockRecorder) EmitLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitLog", reflect.TypeOf((*MockProcessorContext)(nil).EmitLog), arg0)
}

// GetBalance mocks base method.
func (m *MockProcessorContext) GetBalance(arg0 Address) Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(Value)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockProcessorContextMockRecorder) GetBalance(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockProcessorContext)(nil).GetBalance), arg0)
}

// GetBlockHash mocks base method.
func (m *MockProcessorContext) GetBlockHash(number int64) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", number)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockProcessorContextMockRecorder) GetBlockHash(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockProcessorContext)(nil).GetBlockHash), number)
}

// GetCode mocks base method.
func (m *MockProcessorContext) GetCode(arg0 Address) Code {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].(Code)
	return ret0
}

// GetCode indicates an expected call of GetCode.
func (mr *MockProcessorContextMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockProcessorContext)(nil).GetCode), arg0)
}

// GetCodeHash mocks base method.
func (m *MockProcessorContext) GetCodeHash(arg0 Address) Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeHash", arg0)
	ret0, _ := ret[0].(Hash)
	return ret0
}

// GetCodeHash indicates an expected call of GetCodeHash.
func (mr *MockProcessorContextMockRecorder) GetCodeHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeHash", reflect.TypeOf((*MockProcessorContext)(nil).GetCodeHash), arg0)
}

// GetCodeSize mocks base method.
func (m *MockProcessorContext) GetCodeSize(arg0 Address) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCodeSize indicates an expected call of GetCodeSize.
func (mr *MockProcessorContextMockRecorder) GetCodeSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeSize", reflect.TypeOf((*MockProcessorContext)(nil).GetCodeSize), arg0)
}

// GetCommittedStorage mocks base method.
func (m *MockProcessorContext) GetCommittedStorage(addr Address, key Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommittedStorage", addr, key)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetCommittedStorage indicates an expected call of GetCommittedStorage.
func (mr *MockProcessorContextMockRecorder) GetCommittedStorage(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommittedStorage", reflect.TypeOf((*MockProcessorContext)(nil).GetCommittedStorage), addr, key)
}

// GetLogs mocks base method.
func (m *MockProcessorContext) GetLogs() []Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]Log)
	return ret0
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockProcessorContextMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockProcessorContext)(nil).GetLogs))
}

// GetNonce mocks base method.
func (m *MockProcessorContext) GetNonce(arg0 Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockProcessorContextMockRecorder) GetNonce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockProcessorContext)(nil).GetNonce), arg0)
}

// GetStorage mocks base method.
func (m *MockProcessorContext) GetStorage(arg0 Address, arg1 Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorage", arg0, arg1)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetStorage indicates an expected call of GetStorage.
func (mr *MockProcessorContextMockRecorder) GetStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorage", reflect.TypeOf((*MockProcessorContext)(nil).GetStorage), arg0, arg1)
}

// GetTransientStorage mocks base method.
func (m *MockProcessorContext) GetTransientStorage(arg0 Address, arg1 Key) Word {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransientStorage", arg0, arg1)
	ret0, _ := ret[0].(Word)
	return ret0
}

// GetTransientStorage indicates an expected call of GetTransientStorage.
func (mr *MockProcessorContextMockRecorder) GetTransientStorage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransientStorage", reflect.TypeOf((*MockProcessorContext)(nil).GetTransientStorage), arg0, arg1)
}

// HasSelfDestructed mocks base method.
func (m *MockProcessorContext) HasSelfDestructed(addr Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSelfDestructed", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSelfDestructed indicates an expected call of HasSelfDestructed.
func (mr *MockProcessorContextMockRecorder) HasSelfDestructed(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSelfDestructed", reflect.TypeOf((*MockProcessorContext)(nil).HasSelfDestructed), addr)
}

// IsAddressInAccessList mocks base method.
func (m *MockProcessorContext) IsAddressInAccessList(addr Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressInAccessList", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAddressInAccessList indicates an expected call of IsAddressInAccessList.
func (mr *MockProcessorContextMockRecorder) IsAddressInAccessList(addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressInAccessList", reflect.TypeOf((*MockProcessorContext)(nil).IsAddressInAccessList), addr)
}

// IsSlotInAccessList mocks base method.
func (m *MockProcessorContext) IsSlotInAccessList(addr Address, key Key) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSlotInAccessList", addr, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsSlotInAccessList indicates an expected call of IsSlotInAccessList.
func (mr *MockProcessorContextMockRecorder) IsSlotInAccessList(addr, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSlotInAccessList", reflect.TypeOf((*MockProcessorContext)(nil).IsSlotInAccessList), addr, key)
}

// RestoreSnapshot mocks base method.
func (m *MockProcessorContext) RestoreSnapshot(arg0 Snapshot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RestoreSnapshot", arg0)
}

// RestoreSnapshot indicates an expected call of RestoreSnapshot.
func (mr *MockProcessorContextMockRecorder) RestoreSnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreSnapshot", reflect.TypeOf((*MockProcessorContext)(nil).RestoreSnapshot), arg0)
}

// SelfDestruct mocks base method.
func (m *MockProcessorContext) SelfDestruct(addr, beneficiary Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelfDestruct", addr, beneficiary)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SelfDestruct indicates an expected call of SelfDestruct.
func (mr *MockProcessorContextMockRecorder) SelfDestruct(addr, beneficiary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelfDestruct", reflect.TypeOf((*MockProcessorContext)(nil).SelfDestruct), addr, beneficiary)
}

// SetBalance mocks base method.
func (m *MockProcessorContext) SetBalance(arg0 Address, arg1 Value) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBalance", arg0, arg1)
}

// SetBalance indicates an expected call of SetBalance.
func (mr *MockProcessorContextMockRecorder) SetBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalance", reflect.TypeOf((*MockProcessorContext)(nil).SetBalance), arg0, arg1)
}

// SetCode mocks base method.
func (m *MockProcessorContext) SetCode(arg0 Address, arg1 Code) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCode", arg0, arg1)
}

// SetCode indicates an expected call of SetCode.
func (mr *MockProcessorContextMockRecorder) SetCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCode", reflect.TypeOf((*MockProcessorContext)(nil).SetCode), arg0, arg1)
}

// SetNonce mocks base method.
func (m *MockProcessorContext) SetNonce(arg0 Address, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNonce", arg0, arg1)
}

// SetNonce indicates an expected call of SetNonce.
func (mr *MockProcessorContextMockRecorder) SetNonce(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNonce", reflect.TypeOf((*MockProcessorContext)(nil).SetNonce), arg0, arg1)
}

// SetStorage mocks base method.
func (m *MockProcessorContext) SetStorage(arg0 Address, arg1 Key, arg2 Word) StorageStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(StorageStatus)
	return ret0
}

// SetStorage indicates an expected call of SetStorage.
func (mr *MockProcessorContextMockRecorder) SetStorage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStorage", reflect.TypeOf((*MockProcessorContext)(nil).SetStorage), arg0, arg1, arg2)
}

// SetTransientStorage mocks base method.
func (m *MockProcessorContext) SetTransientStorage(arg0 Address, arg1 Key, arg2 Word) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransientStorage", arg0, arg1, arg2)
}

// SetTransientStorage indicates an expected call of SetTransientStorage.
func (mr *MockProcessorContextMockRecorder) SetTransientStorage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransientStorage", reflect.TypeOf((*MockProcessorContext)(nil).SetTransientStorage), arg0, arg1, arg2)
}

// MockProfilingInterpreter is a mock of ProfilingInterpreter interface.
type MockProfilingInterpreter struct {
	ctrl     *gomock.Controller
	recorder *MockProfilingInterpreterMockRecorder
	isgomock struct{}
}

// MockProfilingInterpreterMockRecorder is the mock recorder for MockProfilingInterpreter.
type MockProfilingInterpreterMockRecorder struct {
	mock *MockProfilingInterpreter
}

// NewMockProfilingInterpreter creates a new mock instance.
func NewMockProfilingInterpreter(ctrl *gomock.Controller) *MockProfilingInterpreter {
	mock := &MockProfilingInterpreter{ctrl: ctrl}
	mock.recorder = &MockProfilingInterpreterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfilingInterpreter) EXPECT() *MockProfilingInterpreterMockRecorder {
	return m.recorder
}

// DumpProfile mocks base method.
func (m *MockProfilingInterpreter) DumpProfile() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DumpProfile")
}

// DumpProfile indicates an expected call of DumpProfile.
func (mr *MockProfilingInterpreterMockRecorder) DumpProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DumpProfile", reflect.TypeOf((*MockProfilingInterpreter)(nil).DumpProfile))
}

// ResetProfile mocks base method.
func (m *MockProfilingInterpreter) ResetProfile() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetProfile")
}

// ResetProfile indicates an expected call of ResetProfile.
func (mr *MockProfilingInterpreterMockRecorder) ResetProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetProfile", reflect.TypeOf((*MockProfilingInterpreter)(nil).ResetProfile))
}

// Run mocks base method.
func (m *MockProfilingInterpreter) Run(arg0 Parameters) (Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockProfilingInterpreterMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockProfilingInterpreter)(nil).Run), arg0)
}
